name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64

      - name: Build for Linux AMD64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -o filabridge-linux-amd64 .
          chmod +x filabridge-linux-amd64

      - name: Build for Linux ARM64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
        run: |
          go build -o filabridge-linux-arm64 .
          chmod +x filabridge-linux-arm64

      - name: Build for Windows AMD64
        env:
          CGO_ENABLED: 1
          GOOS: windows
          GOARCH: amd64
          CC: x86_64-w64-mingw32-gcc
        run: |
          go build -o filabridge-windows-amd64.exe .

      - name: Build for macOS AMD64
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: amd64
        run: |
          go build -o filabridge-darwin-amd64 .
          chmod +x filabridge-darwin-amd64

      - name: Build for macOS ARM64
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: arm64
        run: |
          go build -o filabridge-darwin-arm64 .
          chmod +x filabridge-darwin-arm64

      - name: Create checksums
        run: |
          sha256sum filabridge-* > checksums.txt
          cat checksums.txt

      - name: Extract version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install git-chglog
        run: |
          # Download the latest release directly
          echo "Downloading git-chglog..."
          wget -O git-chglog.tar.gz https://github.com/git-chglog/git-chglog/releases/download/v0.15.4/git-chglog_0.15.4_linux_amd64.tar.gz
          
          # Extract and install
          echo "Extracting git-chglog..."
          tar -xzf git-chglog.tar.gz
          
          # Install to system path
          echo "Installing git-chglog..."
          sudo mv git-chglog /usr/local/bin/
          sudo chmod +x /usr/local/bin/git-chglog
          
          # Verify installation
          echo "Verifying installation..."
          git-chglog --version
          
          # Clean up
          rm -f git-chglog.tar.gz

      - name: Generate changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Generating changelog for version: $VERSION"
          
          # Check if git-chglog is available
          which git-chglog
          git-chglog --version
          
          # Generate changelog for this version only
          if git-chglog --output CHANGELOG.md; then
            echo "git-chglog succeeded"
          else
            echo "git-chglog failed, falling back to manual generation"
            # Fallback: generate from git commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMITS=$(git log --pretty=format:"- %s" HEAD)
            else
              COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
            fi
            
            # Create a simple changelog entry
            cat > CHANGELOG.md << 'EOF'
          # Changelog
          
          All notable changes to FilaBridge will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          ## [VERSION_PLACEHOLDER] - DATE_PLACEHOLDER
          
          ### Added
          COMMITS_PLACEHOLDER
          EOF
            
            # Replace placeholders
            sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" CHANGELOG.md
            sed -i "s/DATE_PLACEHOLDER/$(date +%Y-%m-%d)/g" CHANGELOG.md
            sed -i "s/COMMITS_PLACEHOLDER/$COMMITS/g" CHANGELOG.md
          fi
          
          # Show what was generated
          echo "Generated changelog:"
          cat CHANGELOG.md

      - name: Commit updated changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if we're in detached HEAD and checkout main branch
          if [ "$(git rev-parse --abbrev-ref HEAD)" = "HEAD" ]; then
            echo "In detached HEAD state, checking out main branch"
            git checkout main
          fi
          
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(release): update changelog for ${{ github.ref_name }}"
            git push origin main
          fi

      - name: Extract changelog for release notes
        id: changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Extracting changelog for release notes: $VERSION"
          
          # Extract content for this version from the generated changelog
          if [ -f CHANGELOG.md ]; then
            CHANGELOG=$(awk "/## \[$VERSION\]/,/## \[.*\]/{if(/## \[$VERSION\]/) next; if(/## \[.*\]/) exit; print}" CHANGELOG.md)
            if [ -z "$CHANGELOG" ]; then
              echo "No changelog found for version $VERSION, using fallback"
              CHANGELOG="- Automated changelog generation"
            fi
          else
            echo "CHANGELOG.md not found, using fallback"
            CHANGELOG="- Automated changelog generation"
          fi
          
          # Output the changelog
          {
            echo "CHANGELOG<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            filabridge-linux-amd64
            filabridge-linux-arm64
            filabridge-windows-amd64.exe
            filabridge-darwin-amd64
            filabridge-darwin-arm64
            checksums.txt
          body: |
            # FilaBridge ${{ steps.get_version.outputs.VERSION }}
            
            ## Installation
            
            Download the appropriate binary for your platform:
            
            - **Linux (AMD64)**: `filabridge-linux-amd64`
            - **Linux (ARM64)**: `filabridge-linux-arm64` (Raspberry Pi, etc.)
            - **Windows (AMD64)**: `filabridge-windows-amd64.exe`
            - **macOS (Intel)**: `filabridge-darwin-amd64`
            - **macOS (Apple Silicon)**: `filabridge-darwin-arm64`
            
            ### Quick Start
            
            1. Download the binary for your platform
            2. Make it executable (Linux/macOS): `chmod +x filabridge-*`
            3. Run Spoolman: `docker run -d --name spoolman -p 8000:8000 ghcr.io/donkie/spoolman:latest`
            4. Start FilaBridge: `./filabridge-*`
            5. Open http://localhost:5000 and configure your printers
            
            ## Verify Downloads
            
            Verify your download using the checksums:
            ```bash
            sha256sum -c checksums.txt
            ```
            
            ## What's New
            ${{ steps.changelog.outputs.CHANGELOG }}
            
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

