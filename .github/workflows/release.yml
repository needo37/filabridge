name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64

      - name: Build for Linux AMD64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -o filabridge-linux-amd64 .
          chmod +x filabridge-linux-amd64

      - name: Build for Linux ARM64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
        run: |
          go build -o filabridge-linux-arm64 .
          chmod +x filabridge-linux-arm64

      - name: Build for Windows AMD64
        env:
          CGO_ENABLED: 1
          GOOS: windows
          GOARCH: amd64
          CC: x86_64-w64-mingw32-gcc
        run: |
          go build -o filabridge-windows-amd64.exe .

      - name: Build for macOS AMD64
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: amd64
        run: |
          go build -o filabridge-darwin-amd64 .
          chmod +x filabridge-darwin-amd64

      - name: Build for macOS ARM64
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: arm64
        run: |
          go build -o filabridge-darwin-arm64 .
          chmod +x filabridge-darwin-arm64

      - name: Create checksums
        run: |
          sha256sum filabridge-* > checksums.txt
          cat checksums.txt

      - name: Extract version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Generating changelog for version: $VERSION"
          
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi
          
          # Read existing CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
            # Extract header (first 8 lines) and body (rest)
            head -n 8 CHANGELOG.md > /tmp/header.txt
            tail -n +9 CHANGELOG.md > /tmp/body.txt
          else
            # Create header if CHANGELOG.md doesn't exist
            cat > /tmp/header.txt << 'EOF'
          # Changelog
          
          All notable changes to FilaBridge will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          EOF
            touch /tmp/body.txt
          fi
          
          # Create new version entry
          cat > /tmp/new_entry.txt << 'EOF'
          ## [VERSION_PLACEHOLDER] - DATE_PLACEHOLDER
          
          ### Added
          COMMITS_PLACEHOLDER
          
          EOF
            
          # Replace placeholders in new entry
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" /tmp/new_entry.txt
          sed -i "s/DATE_PLACEHOLDER/$(date +%Y-%m-%d)/g" /tmp/new_entry.txt
          # Use a different approach for commits to handle newlines and special characters
          echo "$COMMITS" > /tmp/commits.txt
          sed -i '/COMMITS_PLACEHOLDER/r /tmp/commits.txt' /tmp/new_entry.txt
          sed -i 's/COMMITS_PLACEHOLDER//' /tmp/new_entry.txt
          
          # Combine header + new entry + existing body
          cat /tmp/header.txt /tmp/new_entry.txt /tmp/body.txt > CHANGELOG.md
          
          # Clean up temp files
          rm -f /tmp/header.txt /tmp/body.txt /tmp/new_entry.txt /tmp/commits.txt
          
          # Show what was generated
          echo "Generated changelog:"
          cat CHANGELOG.md

      - name: Commit updated changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if we're in detached HEAD and checkout main branch
          if [ "$(git rev-parse --abbrev-ref HEAD)" = "HEAD" ]; then
            echo "In detached HEAD state, checking out main branch"
            git checkout main
          fi
          
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(release): update changelog for ${{ github.ref_name }}"
            git push origin main
          fi

      - name: Extract changelog for release notes
        id: changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Extracting changelog for release notes: $VERSION"
          
          # Get commits since last tag, excluding release commits
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD)
          fi
          
          # Initialize arrays for different commit types
          declare -a FEATURES=()
          declare -a FIXES=()
          declare -a CHANGES=()
          declare -a DOCS=()
          declare -a OTHER=()
          
          # Process each commit
          while IFS= read -r commit; do
            # Skip automated changelog update commits
            if [[ "$commit" =~ ^chore\(release\):\ update\ changelog\ for ]]; then
              continue
            fi
            
            # Categorize commits by conventional commit prefixes
            if [[ "$commit" =~ ^feat: ]]; then
              FEATURES+=("- ${commit#feat: }")
            elif [[ "$commit" =~ ^(fix|bug): ]]; then
              # Remove both fix: and bug: prefixes
              clean_commit="${commit#fix: }"
              clean_commit="${clean_commit#bug: }"
              FIXES+=("- $clean_commit")
            elif [[ "$commit" =~ ^(chore|refactor|style): ]]; then
              # Remove prefixes for different types
              clean_commit="${commit#chore: }"
              clean_commit="${clean_commit#refactor: }"
              clean_commit="${clean_commit#style: }"
              CHANGES+=("- $clean_commit")
            elif [[ "$commit" =~ ^docs: ]]; then
              DOCS+=("- ${commit#docs: }")
            else
              # Include any commit that doesn't match conventional commit format
              OTHER+=("- $commit")
            fi
          done <<< "$COMMITS"
          
          # Build the changelog sections
          CHANGELOG=""
          
          if [ ${#FEATURES[@]} -gt 0 ]; then
            CHANGELOG="${CHANGELOG}### Added"$'\n'
            printf '%s\n' "${FEATURES[@]}" >> /tmp/features.txt
            CHANGELOG="${CHANGELOG}$(cat /tmp/features.txt)"$'\n\n'
            rm -f /tmp/features.txt
          fi
          
          if [ ${#FIXES[@]} -gt 0 ]; then
            CHANGELOG="${CHANGELOG}### Fixed"$'\n'
            printf '%s\n' "${FIXES[@]}" >> /tmp/fixes.txt
            CHANGELOG="${CHANGELOG}$(cat /tmp/fixes.txt)"$'\n\n'
            rm -f /tmp/fixes.txt
          fi
          
          if [ ${#CHANGES[@]} -gt 0 ]; then
            CHANGELOG="${CHANGELOG}### Changed"$'\n'
            printf '%s\n' "${CHANGES[@]}" >> /tmp/changes.txt
            CHANGELOG="${CHANGELOG}$(cat /tmp/changes.txt)"$'\n\n'
            rm -f /tmp/changes.txt
          fi
          
          if [ ${#DOCS[@]} -gt 0 ]; then
            CHANGELOG="${CHANGELOG}### Documentation"$'\n'
            printf '%s\n' "${DOCS[@]}" >> /tmp/docs.txt
            CHANGELOG="${CHANGELOG}$(cat /tmp/docs.txt)"$'\n\n'
            rm -f /tmp/docs.txt
          fi
          
          if [ ${#OTHER[@]} -gt 0 ]; then
            CHANGELOG="${CHANGELOG}### Other"$'\n'
            printf '%s\n' "${OTHER[@]}" >> /tmp/other.txt
            CHANGELOG="${CHANGELOG}$(cat /tmp/other.txt)"$'\n\n'
            rm -f /tmp/other.txt
          fi
          
          # Remove trailing newlines
          CHANGELOG=$(echo -n "$CHANGELOG" | sed 's/\n*$//')
          
          echo "Generated changelog:"
          echo "$CHANGELOG"
          
          # Output the changelog
          {
            echo "CHANGELOG<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            filabridge-linux-amd64
            filabridge-linux-arm64
            filabridge-windows-amd64.exe
            filabridge-darwin-amd64
            filabridge-darwin-arm64
            checksums.txt
          body: |
            # FilaBridge ${{ steps.get_version.outputs.VERSION }}
            
            ## Installation
            
            Download the appropriate binary for your platform:
            
            - **Linux (AMD64)**: `filabridge-linux-amd64`
            - **Linux (ARM64)**: `filabridge-linux-arm64` (Raspberry Pi, etc.)
            - **Windows (AMD64)**: `filabridge-windows-amd64.exe`
            - **macOS (Intel)**: `filabridge-darwin-amd64`
            - **macOS (Apple Silicon)**: `filabridge-darwin-arm64`
            
            ### Quick Start
            
            1. Download the binary for your platform
            2. Make it executable (Linux/macOS): `chmod +x filabridge-*`
            3. Run Spoolman: `docker run -d --name spoolman -p 8000:8000 ghcr.io/donkie/spoolman:latest`
            4. Start FilaBridge: `./filabridge-*`
            5. Open http://localhost:5000 and configure your printers
            
            ## Verify Downloads
            
            Verify your download using the checksums:
            ```bash
            sha256sum -c checksums.txt
            ```
            
            ## What's New
            ${{ steps.changelog.outputs.CHANGELOG }}
            
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

